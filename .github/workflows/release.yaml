name: Release Spring Executor Starter

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for creating releases
      packages: write  # Required for publishing to GitHub Packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: Configure Maven settings
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          server-id: github  # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }}  # location for the settings.xml file

      - name: Extract version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Update Maven version
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.VERSION }}
          mvn versions:commit

      - name: Run tests
        run: mvn clean test

      - name: Build project
        run: mvn clean compile package -DskipTests

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges -10)
          fi
          
          # Save changelog to file and output
          echo "$CHANGELOG" > CHANGELOG.md
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in v${{ steps.version.outputs.VERSION }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Artifacts
            - JAR file: `target/*.jar`
            - Source code is available below
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/*.jar
          asset_name: ${{ github.event.repository.name }}-${{ steps.version.outputs.VERSION }}.jar
          asset_content_type: application/java-archive

      - name: Publish to GitHub Packages
        run: |
          mvn deploy -DskipTests -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Deploy to Maven Central (requires additional setup)
      - name: Publish to Maven Central
        if: contains(github.ref, 'refs/tags/') && !contains(github.ref, 'beta') && !contains(github.ref, 'alpha')
        run: |
          # Uncomment and configure if you want to publish to Maven Central
          # You'll need to set up GPG signing and OSSRH credentials
          # mvn clean deploy -P release -DskipTests
          echo "Maven Central deployment disabled. Configure GPG and OSSRH credentials to enable."
        env:
          # MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          # MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          # MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Notify on release completion
  notify:
    needs: release
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release v${{ needs.release.outputs.VERSION }} completed successfully!"

      - name: Notify failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed. Check the logs for details."
          exit 1